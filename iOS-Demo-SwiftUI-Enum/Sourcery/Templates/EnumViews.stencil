// MARK - Generate SwiftUI Views for Enums

import SwiftUI

{% for enum in types.enums %}
{% if enum.cases.count > 0 %}
{{ enum.accessLevel }} extension {{ enum.name }} {
  struct Switch<{% for case in enum.cases %}T{{ forloop.counter }}: View{{ ', ' if not forloop.last }}{% endfor %}>: View {
    var body: TupleView<({% for case in enum.cases %}T{{ forloop.counter }}?{{ ', ' if not forloop.last }}{% endfor %})>

    init(
      value: {{ enum.name }},
      {% for case in enum.cases %}
      {{ case.name }} p{{ forloop.counter }}: @escaping ({% for av in case.associatedValues %}{{ av.typeName }}{{ ', ' if not forloop.last }}{% endfor %}) -> T{{ forloop.counter }}{{ ', ' if not forloop.last }}
      {% endfor %}
    ) {
      {% for case in enum.cases %}
      var v{{ forloop.counter }}: T{{ forloop.counter }}?
      {% endfor %}

      switch value {
      {% for case in enum.cases %}
      {% if case.associatedValues.count > 0 %}
      case .{{ case.name }}({% for av in case.associatedValues %}let f{{ forloop.counter }}{{ ', ' if not forloop.last }}{% endfor %}):
      {% else %}
      case .{{ case.name }}:
      {% endif %}
      {% if case.associatedValues.count > 0 %}
        v{{ forloop.counter }} = p{{ forloop.counter }}({% for av in case.associatedValues %}f{{ forloop.counter }}{{ ', ' if not forloop.last }}{% endfor %})
      {% else %}
        v{{ forloop.counter }} = p{{ forloop.counter }}()
      {% endif %}
      {% endfor %}
      }

      body = TupleView(({% for case in enum.cases %}v{{ forloop.counter }}{{ ', ' if not forloop.last }}{% endfor %}))
    }
  }
}

{% endif %}
{% endfor %}
